# -*- coding: utf-8 -*-
"""HaarCascade_car_detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10eWVeFmnlF1hr5VBtgk5wJiHsRN-ODNA
"""

import cv2
from google.colab.patches import cv2_imshow

print('Project Topic: Implement Haar Cascade Classifier to detect vehicles in image and video')
print('Research Internship on Machine learning using Images')

# Path to the Haar Cascade XML file for vehicle detection (adjust as needed)
cascade_path = '/content/haarcascade_vehicle (1).xml'

# Verify if the cascade has been loaded properly
vehicle_cascade = cv2.CascadeClassifier(cascade_path)
if vehicle_cascade.empty():
    raise IOError("Failed to load cascade classifier. Check the path and file.")

# Path to the video file for vehicle detection (adjust as needed)
video_path = '/content/Main Project_Main Project_Car Detection_video.avi'

# Open video capture
cap = cv2.VideoCapture(video_path)

# Check if video capture is open
if not cap.isOpened():
    print(f"Error: Failed to open video at {video_path}")
    exit()

while True:
    # Read a frame from the video
    ret, frames = cap.read()

    # Check if frame is read correctly
    if not ret:
        print("Error: Failed to read frame.")
        break

    # Convert frame to grayscale
    gray = cv2.cvtColor(frames, cv2.COLOR_BGR2GRAY)

    # Detect cars in the grayscale frame
    cars = vehicle_cascade.detectMultiScale(gray, 1.1, 1)

    # Draw rectangles around detected cars
    for (x, y, w, h) in cars:
        cv2.rectangle(frames, (x, y), (x+w, y+h), (0, 255, 255), 2)

    # Display the annotated frame
    cv2_imshow(frames)

    # Exit if Esc key is pressed
    if cv2.waitKey(33) == 27:
        break

# Release video capture and close all OpenCV windows
cap.release()
cv2.destroyAllWindows()